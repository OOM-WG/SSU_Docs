import{_ as u,a6 as t,L as h,M as m,W as o,a7 as i,aa as r,h as s,P as d,b7 as S}from"./chunks/framework.DSr6HixA.js";const N=JSON.parse('{"title":"模块开发","description":"学习如何为 ShiroSU 开发和构建自定义模块","frontmatter":{"layout":"doc","title":"模块开发","description":"学习如何为 ShiroSU 开发和构建自定义模块","outline":"deep","footer":false,"breadcrumbs":[{"title":"ShiroSU","link":"/zh"},{"title":"dev","link":""},{"title":"模块开发","link":"/zh/dev/module"}]},"headers":[],"relativePath":"dev/module.md","filePath":"zh/dev/module.md","lastUpdated":1755655878000}'),b={name:"dev/module.md"},k={class:"tip custom-block"},g={class:"footnotes"},f={class:"footnotes-list"},A={id:"fn2",class:"footnote-item"};function y(U,e,P,_,v,x){const n=t("ArticleMetadata"),a=t("NolebasePageProperties"),l=t("VPNolebaseInlineLinkPreview"),p=t("NolebaseGitContributors"),c=t("NolebaseGitChangelog");return m(),h("div",null,[e[27]||(e[27]=o("h1",{id:"模块开发指南",tabindex:"-1"},[s("模块开发指南 "),o("a",{class:"header-anchor",href:"#模块开发指南","aria-label":"Permalink to “模块开发指南”"},"​")],-1)),i(n),i(a),e[28]||(e[28]=o("p",null,[s("对于大部分内容，ShiroSU 与 "),o("strong",null,[o("code",null,"Magisk"),s(" 和 "),o("code",null,"KernelSU")]),s(" 基本保持一致，此处仅介绍不同之处。")],-1)),o("div",k,[e[4]||(e[4]=o("p",{class:"custom-block-title custom-block-title-default"},"TIP",-1)),e[5]||(e[5]=o("p",null,[s("如果将 ShiroSU 仅用于其他 root 实现的模块管理器，那么模块标准应当以当前 root 实现为准，ShiroSU "),o("strong",null,"不会干涉"),s("其他 root 实现的任何行为")],-1)),o("p",null,[e[1]||(e[1]=s("但模块的 ",-1)),e[2]||(e[2]=o("strong",null,"WebUI 需要考虑",-1)),e[3]||(e[3]=s("到 ShiroSU 的 ",-1)),i(l,{href:"./webui"},{default:d(()=>e[0]||(e[0]=[s("模块 WebUI",-1)])),_:1,__:[0]})])]),e[29]||(e[29]=r('<div class="important custom-block github-alert"><p class="custom-block-title">IMPORTANT</p><p>请确保模块内的所有文本文件均使用 <code>UNIX (LF)</code> 换行类型，而不是 <code>Windows (CR + LF)</code> 或 <code>Macintosh (CR)</code>！</p></div><h2 id="systemless" tabindex="-1">Systemless <sup class="footnote-ref"><a href="#fn1" id="fnref1">[1]</a></sup> <a class="header-anchor" href="#systemless" aria-label="Permalink to “Systemless”">​</a></h2><p>ShiroSU 的 Systemless 是一种类似于 Magisk 的挂载机制，其接口完全兼容 Magisk，例如 <code>.replace</code> 用法。但 ShiroSU 的挂载机制兼容性更强。是基于动态识别分区实现的。也就是说，模块可以直接通过 Systemless 挂载例如 <code>odm</code> 以及其他 root 实现无法挂载的分区，无需为此而付出额外的心血。</p><p>并且，为了保证更强的安全性，ShiroSU 的 Systemless 会无视模块挂载的 <strong>文件/目录的 SELinux 上下文</strong>、<strong>目录的权限</strong>以及<strong>文件/目录的用户/组</strong>，如果文件挂载到了不存在的目录，那么其 <strong>SELinux 上下文</strong>、<strong>权限</strong>、<strong>用户/组</strong>均会继承自父目录。通常来说，这些行为不会影响模块的运行，反而有助于提高稳定性。</p><div class="tip custom-block"><p class="custom-block-title custom-block-title-default">TIP</p><p>ShiroSU 的 Systemless 会使用模块目录中的 <code>systemless</code> 文件夹执行挂载，如果模块通过 <code>system</code> 文件夹使用 Systemless，那么 <code>systemless</code> 文件夹会被<strong>自动创建</strong></p><p>如果模块仅适配 ShiroSU，那么可以直接通过 <code>systemless</code> 文件夹使用 Systemless</p></div><h2 id="shell" tabindex="-1">Shell <a class="header-anchor" href="#shell" aria-label="Permalink to “Shell”">​</a></h2><p>ShiroSU 在此处与其他 root 实现有较大差异，ShiroSU 运行的 Shell 脚本默认<strong>并不</strong>在 <code>BusyBox</code> 中以 “独立模式” 运行。</p>',7)),o("p",null,[e[8]||(e[8]=s("为了提升 Shell 脚本开发的便利性，ShiroSU 使用 ",-1)),i(l,{href:"https://github.com/shellgei/rusty_bash",target:"_blank",rel:"noreferrer"},{default:d(()=>e[6]||(e[6]=[s("sush",-1)])),_:1,__:[6]}),e[9]||(e[9]=s(" (用 Rust 编写的 ",-1)),e[10]||(e[10]=o("code",null,"Bash",-1)),e[11]||(e[11]=s(") 运行 Shell 脚本，并且优先使用 ",-1)),i(l,{href:"https://github.com/uutils/coreutils",target:"_blank",rel:"noreferrer"},{default:d(()=>e[7]||(e[7]=[s("uutils",-1)])),_:1,__:[7]}),e[12]||(e[12]=s(" (用 Rust 编写的 ",-1)),e[13]||(e[13]=o("code",null,"coreutils",-1)),e[14]||(e[14]=s(") 的命令集，以 Magisk 的 BusyBox 作为替补。也就是说，命令",-1)),e[15]||(e[15]=o("strong",null,"优先从 uutils 获取",-1)),e[16]||(e[16]=s("，没有的命令才会从 BusyBox 获取。",-1))]),e[30]||(e[30]=r(`<p>由于并不在 BusyBox 中以 “独立模式” 运行，命令都是通过 <code>PATH</code> 环境变量注入的，请勿在模块的 Shell 脚本内硬编码修改 <code>PATH</code>！</p><h3 id="环境变量" tabindex="-1">环境变量 <a class="header-anchor" href="#环境变量" aria-label="Permalink to “环境变量”">​</a></h3><p>为了便于区分，ShiroSU 在模块运行时注入以下变量:</p><ul><li><code>SSU</code> (布尔值): 在 ShiroSU 环境下运行时，此值将为 <code>true</code>。但这并不能代表可以通过 <code>$SSU &amp;&amp; # code ...</code> 来执行代码，应当始终使用 <code>[ &quot;$SSU&quot; = true ]</code> 或类似方法来检测 ShiroSU</li><li><code>SSU_VER</code> (字符串): ShiroSU 的版本号 (不包括补丁号)</li><li><code>SSU_VER_CODE</code> (整数值): ShiroSU 的纯数字版本号 (包括补丁号)</li></ul><h3 id="recovery" tabindex="-1">Recovery <a class="header-anchor" href="#recovery" aria-label="Permalink to “Recovery”">​</a></h3><p>ShiroSU 不支持通过 Recovery 安装模块，并且在模块安装时 <code>META-INF/com/google/android/update-binary</code> 中的代码不会被执行。</p><h3 id="su-调用" tabindex="-1">SU 调用 <a class="header-anchor" href="#su-调用" aria-label="Permalink to “SU 调用”">​</a></h3><p>ShiroSU 的 SU 实现默认附带了一个仅能用于直接执行 Shell 命令的 <code>sudo</code>，可以直接通过 <code>sudo</code> 来执行例如 <code>sudo ls /</code>。</p><p><code>sudo</code> 仅作为一个简易的 <code>su -c</code> 替代品而存在，但是任何模块内都<strong>不应该</strong>通过 <code>sudo</code> 或 <code>su -c</code> 执行 Shell 命令！</p><p><mark>同样的，任何模块也<strong>不应该</strong>通过<strong>硬编码</strong>来获取命令，例如 <code>/data/adb/ssu/bin/busybox crond</code>，因为无论是在 BusyBox 的 “独立模式” 还是直接通过 <code>PATH</code> 注入命令，命令都已经可以直接调用，无需任何硬编码的手动获取行为。</mark></p><h2 id="ansi-转义码" tabindex="-1">ANSI 转义码 <sup class="footnote-ref"><a href="#fn2" id="fnref2">[2]</a></sup> <a class="header-anchor" href="#ansi-转义码" aria-label="Permalink to “ANSI 转义码”">​</a></h2><p>ShiroSU 允许在 <code>module.prop</code> 或 Shell 脚本中使用 <code>ANSI 转义码</code> 来丰富文本的显示，例如可在 <code>module.prop</code> 使用如下代码:</p><div class="language-properties line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">properties</span><pre class="shiki shiki-themes github-light github-dark-dimmed" style="--shiki-light:#24292e;--shiki-dark:#adbac7;--shiki-light-bg:#fff;--shiki-dark-bg:#22272e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">id</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">=ssu_cmd_ext</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">name</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">=Command Set Extension</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">version</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">=Auto-generated by SSU</span></span>
<span class="line highlighted"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">versionAnsi</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">=\\e[1mAuto-generated\\e[0m by SSU</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">versionCode</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">=1</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">author</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">=SSU Developers (O.O.M. W.G.)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">description</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">=Add coreutils, busybox, and bash to /system/bin.</span></span>
<span class="line highlighted"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">descriptionAnsi</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">=Add \\e[1mcoreutils, busybox, and bash\\e[0m to \\e[1m/system/bin\\e[0m.</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p>使用如上 <code>module.prop</code> 后，模块在 ShiroSU 管理器中显示时 <code>Auto-generated</code>、<code>coreutils, busybox, and bash</code> 以及 <code>/system/bin</code> 均会被加粗。</p><p>在 <code>module.prop</code> 中，可使用 <code>nameAnsi</code>、<code>versionAnsi</code>、<code>authorAnsi</code>、<code>descriptionAnsi</code>、<code>actionAnsi</code> 来显示包含 ANSI 转义码的文本。</p><p>虽然不包含 <code>Ansi</code> 后缀同样可以使用，但是为了确保兼容性，请这么做。</p><p><mark>ShiroSU 是通过顺序解析来读取 <code>module.prop</code> 中的内容的，所以请确保包含 <code>Ansi</code> 后缀的值是靠后的。</mark></p><details class="details custom-block"><summary>展开查看渲染效果</summary><p><img src="`+S+'" alt="module.prop 渲染效果"></p></details><h2 id="模块-webui" tabindex="-1">模块 WebUI <a class="header-anchor" href="#模块-webui" aria-label="Permalink to “模块 WebUI”">​</a></h2>',19)),o("p",null,[e[18]||(e[18]=s("ShiroSU 与 ",-1)),e[19]||(e[19]=o("code",null,"KernelSU",-1)),e[20]||(e[20]=s(" 同样允许模块使用 WebUI 提供功能，详见 ",-1)),i(l,{href:"./webui"},{default:d(()=>e[17]||(e[17]=[s("模块 WebUI",-1)])),_:1,__:[17]}),e[21]||(e[21]=s("。",-1))]),e[31]||(e[31]=r('<h2 id="module-prop" tabindex="-1">module.prop <a class="header-anchor" href="#module-prop" aria-label="Permalink to “module.prop”">​</a></h2><p>ShiroSU 管理器有一个机制用来检测 <code>module.prop</code> 是否损坏或符合规范，如果损坏或不符合规范，ShiroSU 管理器会在该模块的上方显示一个标签。</p><div class="warning custom-block"><p class="custom-block-title custom-block-title-default">WARNING</p><p>有些模块会使用 <code>sed</code> 命令来修改 <code>module.prop</code> 以实现实时更新内容，但此方法有一定概率会导致 <code>module.prop</code> 文件损坏，请避免通过 <code>sed</code> 修改或者通过其他方式来显示实时内容，也可以实现一个 <code>module.prop</code> 损坏检测机制，在其损坏时恢复至默认内容</p></div><p>ShiroSU 管理器具体会检测如下内容:</p><ul><li><code>module.prop</code> 内是否包含不符合语法的内容</li><li><code>id</code>、<code>name</code>、<code>version</code>、<code>author</code>、<code>description</code> 是否为空 (如有带有 <code>Ansi</code> 后缀的同样检测)</li><li><code>id</code> 是否符合此正则表达式: <code>^[a-zA-Z][a-zA-Z0-9._-]+$</code></li><li><code>versionCode</code> 是否大于 <strong>0</strong></li><li><code>module.prop</code> 内是否存在大小写不规范的情况 (ShiroSU 管理器会正常解析，但仍会显示标签)</li></ul><p><mark>如果只是 <code>module.prop</code> 损坏，重装模块通常可解决此问题，如果不符合规范，则需要开发者自行修复以解决此问题。</mark></p><h3 id="其他内容" tabindex="-1">其他内容 <a class="header-anchor" href="#其他内容" aria-label="Permalink to “其他内容”">​</a></h3><p>除了 <strong>ANSI 转义码</strong> 相关内容之外，ShiroSU 管理器还会解析如下内容:</p><ul><li><code>action</code>: 定义此内容，会在执行操作前显示弹窗，此内容用于描述操作有何作用</li><li><code>runtimeInfo</code>: 定义此内容，会在模块名称旁边显示可点击图标，此内容为文本文件的 <strong>模块相对路径/绝对路径</strong>，用于描述模块运行时的信息</li></ul><p>ShiroSU 管理器还会自动搜索模块目录内是否有符合正则表达式 <code>(?i)^(?:license|licence)(?:[-_][A-Za-z0-9]+)?(?:\\.(?:txt|md|mkd))?$</code> 的文件。如有，则会在模块信息卡片中显示一个许可证标签，点击则会显示模块的许可证内容</p><h2 id="内核接口" tabindex="-1">内核接口 <a class="header-anchor" href="#内核接口" aria-label="Permalink to “内核接口”">​</a></h2><p>ShiroSU 使用 <code>/data/adb/ssu/._settings</code> 作为内核设置目录，通常包含以下文件:</p><ul><li><code>._su_list</code>: 授权使用超级用户权限的列表</li><li><code>._bypass_list</code>: 绕过 SELinux 限制的列表</li><li><code>._hide_list</code>: 需要隐藏 root 使用痕迹的列表</li></ul><p><mark>以上文件均采用 <code>二进制 UID</code>(32 位整数) + <code>\\0</code> + <code>软件包名</code> 格式存储，多个值之间以 <code>\\n</code> 间隔</mark></p><div class="important custom-block github-alert"><p class="custom-block-title">IMPORTANT</p><p>以上文件均为只读，任何模块/软件都不应该修改 ShiroSU 的内核配置文件，<strong>仅 ShiroSU 管理器</strong>有修改权限！</p><p>其他模块/软件修改理应无效，ShiroSU 会在后续更新中逐步添加对内核配置文件写入的限制</p></div><h2 id="其他差异" tabindex="-1">其他差异 <a class="header-anchor" href="#其他差异" aria-label="Permalink to “其他差异”">​</a></h2><p>ShiroSU 会在后续更新中提供<strong>模块备份接口</strong>、<strong>模块更新接口 (在更新时执行原本模块的代码)</strong>、<strong>模块存储接口</strong>等功能，这些内容尚在规划中，会在后续更新中推出。</p>',17)),i(p),i(c),e[32]||(e[32]=o("hr",{class:"footnotes-sep"},null,-1)),o("section",g,[o("ol",f,[e[26]||(e[26]=o("li",{id:"fn1",class:"footnote-item"},[o("p",null,[s("Systemless 机制是一种无需直接修改系统分区即可实现修改系统文件的方法，为模块提供了便利性。 "),o("a",{href:"#fnref1",class:"footnote-backref"},"↩︎")])],-1)),o("li",A,[o("p",null,[e[23]||(e[23]=s("ANSI 转义码是一种用于控制文本显示样式的字符编码方式，常用于终端和控制台应用程序中，详见",-1)),i(l,{href:"https://en.wikipedia.org/wiki/ANSI_escape_code",target:"_blank",rel:"noreferrer"},{default:d(()=>e[22]||(e[22]=[s("维基百科",-1)])),_:1,__:[22]}),e[24]||(e[24]=s("。 ",-1)),e[25]||(e[25]=o("a",{href:"#fnref2",class:"footnote-backref"},"↩︎",-1))])])])])])}const T=u(b,[["render",y]]);export{N as __pageData,T as default};
