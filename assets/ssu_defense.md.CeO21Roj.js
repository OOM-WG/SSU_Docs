import{_ as U,a6 as t,L as p,M as u,W as d,a7 as r,aa as s,h as o,P as n}from"./chunks/framework.DSr6HixA.js";const g=JSON.parse('{"title":"针对 ShiroSU 负面声音","description":"","frontmatter":{"layout":"doc","footer":false,"breadcrumbs":[{"title":"ShiroSU","link":"/zh"},{"title":"ssu","link":""},{"title":"针对 ShiroSU 负面声音","link":"/zh/ssu/defense"}]},"headers":[],"relativePath":"ssu/defense.md","filePath":"zh/ssu/defense.md","lastUpdated":1755655878000}'),b={name:"ssu/defense.md"};function f(k,e,m,P,h,_){const a=t("ArticleMetadata"),i=t("NolebasePageProperties"),l=t("VPNolebaseInlineLinkPreview"),S=t("NolebaseGitContributors"),c=t("NolebaseGitChangelog");return u(),p("div",null,[e[14]||(e[14]=d("h1",{id:"针对-shirosu-负面声音",tabindex:"-1"},[o("针对 ShiroSU 负面声音 "),d("a",{class:"header-anchor",href:"#针对-shirosu-负面声音","aria-label":"Permalink to “针对 ShiroSU 负面声音”"},"​")],-1)),r(a),r(i),e[15]||(e[15]=s('<h2 id="避嫌声明" tabindex="-1">避嫌声明 <a class="header-anchor" href="#避嫌声明" aria-label="Permalink to “避嫌声明”">​</a></h2><p>我们不与其他 <code>ROOT实现</code> 竞争，人际关系那点破事我们也懒得搅和 所以不管别人说什么，我们希望你不要在意，只是选择你想要的就好，你觉得什么好用就用什么</p><blockquote><p><code>SUU</code> 和 <code>SSU</code> 为姊妹项目，请注意区分 <code>SUU</code> 名为<code>苏柚</code>，SSU 为 <code>ShiroSU</code> 的缩写。 以下简称 <code>SSU</code>。</p></blockquote><h2 id="对于-ssu-项目诞生以来-听到太多负面声音了" tabindex="-1">对于 <code>SSU</code> 项目诞生以来，听到太多负面声音了 <a class="header-anchor" href="#对于-ssu-项目诞生以来-听到太多负面声音了" aria-label="Permalink to “对于 SSU 项目诞生以来，听到太多负面声音了”">​</a></h2><ul><li>怀疑 SSU 是 Fork 的 KernelSU。</li><li>又是一个 KernelSU 分支，不做评价。</li><li>SSU 是个 PPT 项目。</li><li>还没写好就出来造势。</li><li>能把 SSU 的 SU 写出来我就不说它。</li><li>看着就像个空壳子，然后套了 KernelSU 的 API。</li></ul><p>等等一系列负面言论。 并且，对一个处于 <code>Preview</code> 状态下的项目进行的任何细节上的谩骂都是毫无意义的。</p><h2 id="对于-ssu-项目开源说明" tabindex="-1">对于 SSU 项目开源说明 <a class="header-anchor" href="#对于-ssu-项目开源说明" aria-label="Permalink to “对于 SSU 项目开源说明”">​</a></h2><p><code>SSU</code> 项目为 <code>O.O.M. W.G.</code> 的隶属项目，其 @安音咲汀 为用户空间实现的开发者，@Linso 为内核空间实现的开发者，对于 SSU 文档内容为 @YumeYuka 编写并与其他成员协作优化。截至项目成立到目前六月底，<code>SSU</code> 管理器已经开发至可作为<code>模块管理器</code>使用，内核空间实现由于 @Linso 私人原因开发进度缓慢。</p>',8)),d("p",null,[e[3]||(e[3]=d("code",null,"SSU",-1)),e[4]||(e[4]=o(" 已开源部分",-1)),r(l,{href:"https://github.com/OOM-WG/ShiroSU",target:"_blank",rel:"noreferrer"},{default:n(()=>e[0]||(e[0]=[o("配置",-1)])),_:1,__:[0]}),e[5]||(e[5]=o("以及",-1)),r(l,{href:"https://github.com/OOM-WG/WMLang",target:"_blank",rel:"noreferrer"},{default:n(()=>e[1]||(e[1]=[o("核心组件",-1)])),_:1,__:[1]}),e[6]||(e[6]=o(" ，详见 ",-1)),r(l,{href:"https://github.com/OOM-WG",target:"_blank",rel:"noreferrer"},{default:n(()=>e[2]||(e[2]=[o("https://github.com/OOM-WG",-1)])),_:1,__:[2]}),e[7]||(e[7]=o("。管理器全部代码由 @安音咲汀 编写，@YumeYuka 参与优化一小部分页面，用户空间代码已全部规避 ",-1)),e[8]||(e[8]=d("code",null,"GPL",-1)),e[9]||(e[9]=o("协议，包括",-1)),e[10]||(e[10]=d("code",null,"WebUI",-1)),e[11]||(e[11]=o("实现。对于内核空间代码由 @Linso 完成，开源程度由 @Linso 完善度决定。对于文档部分，文档使用 ",-1)),e[12]||(e[12]=d("code",null,"vitepress",-1)),e[13]||(e[13]=o(" 驱动，目前只考虑开放文章部分。",-1))]),e[16]||(e[16]=s('<p>对于具体的开源方向，<code>SSU</code> 项目将主要开源在开发过程中形成的较为成熟的框架/工具等，开源核心源码并不是首要目的。</p><p><code>SSU</code> 的界面是使用第三方库开发的，由于第三方库的欠缺，在部分 UI 底层上的问题，<code>SSU</code> 的开发者暂时无力解决。</p><h2 id="对于-ssu-kernelsu-fork" tabindex="-1">对于 SSU == KernelSU Fork <a class="header-anchor" href="#对于-ssu-kernelsu-fork" aria-label="Permalink to “对于 SSU == KernelSU Fork”">​</a></h2><blockquote><p>评价：玩 <code>KernelSU Next</code> 玩的。</p></blockquote><p><code>O.O.M. W.G.</code> 成员帖子中明确注明非 <code>KernelSU</code> 分支，盲目得出结论未免为时过早，<code>SSU</code> 仍在开发中，root 实现需要等待内核空间实现代码开发进度。</p><p>尽管 <code>SSU</code> 同样是基于内核的 root 实现，但这并不代表项目之间存在直接关联。在某些技术实现上有重叠是很正常的现象，但过度解读这种重叠并无意义。</p><p>有些人说是 <code>KernelSU</code> API 套壳，但是 <code>KernelSU</code> 并没有任何通用 API，<code>SSU</code> 的所有代码都是针对各种有模块实现的 root 实现而进行的通用开发，并且 <code>SSU</code> 主体是一个 <code>Kotlin</code> 项目，绝大部分代码都是由 <code>Kotlin</code> 的 <code>JVM/Native</code> 实现的，仅有少部分代码由于 <code>Kotlin</code> 无法实现，是由 <code>C++</code> 实现的，而其他 root 实现大多都采用 <code>Kotlin/Java</code> 开发软件，<code>C++/Rust</code> 开发用户空间工具，说 <code>SSU</code> 是 <code>Fork</code> 纯属无稽之谈。</p><p>并且，如果跟随着 <code>SSU</code> 的历史更新并深究具体更新内容，就能发现 <code>SSU</code> 逐渐实现了 <code>SU CLI</code> 、通用操作、通用模块安装等内容，只不过这些内容都是为了后续内容而铺垫，并没有写进更新日志。</p><h2 id="最后" tabindex="-1">最后 <a class="header-anchor" href="#最后" aria-label="Permalink to “最后”">​</a></h2><p>对于负面声音，我们不会理会，<code>SSU</code> 会是一个高度实现独立的项目，并非画饼，预计将会在<code>7 月底</code>之前实现内核空间，敬请期待。</p>',10)),r(S),r(c)])}const O=U(b,[["render",f]]);export{g as __pageData,O as default};
