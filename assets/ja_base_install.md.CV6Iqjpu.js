import{_ as c,a6 as e,L as d,M as h,W as t,a7 as o,aa as p,h as b}from"./chunks/framework.DSr6HixA.js";const U=JSON.parse('{"title":"インストールガイド","description":"詳細な ShiroSU インストール手順と設定説明","frontmatter":{"layout":"doc","title":"インストールガイド","description":"詳細な ShiroSU インストール手順と設定説明","outline":"deep","footer":false,"breadcrumbs":[{"title":"ShiroSU","link":"/ja"},{"title":"base","link":""},{"title":"インストールガイド","link":"/ja/base/install"}]},"headers":[],"relativePath":"ja/base/install.md","filePath":"ja/base/install.md","lastUpdated":1755655878000}'),_={name:"ja/base/install.md"};function g(u,a,S,m,k,f){const r=e("ArticleMetadata"),l=e("NolebasePageProperties"),i=e("Downloaded"),s=e("NolebaseGitContributors"),n=e("NolebaseGitChangelog");return h(),d("div",null,[a[0]||(a[0]=t("h1",{id:"shirosu-マネージャーのダウンロード",tabindex:"-1"},[b("ShiroSU マネージャーのダウンロード "),t("a",{class:"header-anchor",href:"#shirosu-マネージャーのダウンロード","aria-label":"Permalink to “ShiroSU マネージャーのダウンロード”"},"​")],-1)),o(r),o(l),o(i),a[1]||(a[1]=p('<h2 id="root権限の取得" tabindex="-1">Root権限の取得 <a class="header-anchor" href="#root権限の取得" aria-label="Permalink to “Root権限の取得”">​</a></h2><h3 id="その他のマネージャーによる権限付与" tabindex="-1">その他のマネージャーによる権限付与 <a class="header-anchor" href="#その他のマネージャーによる権限付与" aria-label="Permalink to “その他のマネージャーによる権限付与”">​</a></h3><p><code>ShiroSU</code> をモジュールマネージャーとして使用する場合、<code>Magisk</code> や <code>KernelSU</code> などのRootソリューションを事前にインストールする必要があります。</p><ol><li><code>Magisk</code> または <code>KernelSU</code> マネージャーで、<code>ShiroSU</code> アプリにRoot権限を付与します。</li><li>権限付与後、<code>ShiroSU</code> は自動的にモジュールリストを認識してロードし、以降の管理を行います。</li></ol><h3 id="shirosuによる方法-開発中" tabindex="-1">ShiroSUによる方法（開発中） <a class="header-anchor" href="#shirosuによる方法-開発中" aria-label="Permalink to “ShiroSUによる方法（開発中）”">​</a></h3><div class="note custom-block github-alert"><p class="custom-block-title">NOTE</p><p><code>ShiroSU</code> のネイティブRoot実装機能は開発中です。現時点ではサポートされていません。</p></div><hr><h2 id="モジュールマネージャーの使い方" tabindex="-1">モジュールマネージャーの使い方 <a class="header-anchor" href="#モジュールマネージャーの使い方" aria-label="Permalink to “モジュールマネージャーの使い方”">​</a></h2><p>モジュール管理画面では、インストール済みのすべてのモジュールを一元的に管理でき、検索、ソート、有効化、無効化、アンインストールなどの主要機能をサポートしています。</p><h3 id="_1-モジュールリストのグローバル操作" tabindex="-1">1. モジュールリストのグローバル操作 <a class="header-anchor" href="#_1-モジュールリストのグローバル操作" aria-label="Permalink to “1. モジュールリストのグローバル操作”">​</a></h3><p>ページの右上にあり、すべてのモジュールを一括処理するためのボタンが用意されています。</p><ul><li><strong>すべて有効化</strong>：リスト内のすべてのモジュールを有効化します。</li><li><strong>すべて無効化</strong>：リスト内のすべてのモジュールを無効化します。</li><li><strong>すべて更新</strong>：すべてのモジュールを最新バージョンに更新できるか確認します。</li></ul><h3 id="_2-個々のモジュールの詳細操作" tabindex="-1">2. 個々のモジュールの詳細操作 <a class="header-anchor" href="#_2-個々のモジュールの詳細操作" aria-label="Permalink to “2. 個々のモジュールの詳細操作”">​</a></h3><p>各モジュールは独立したカード形式で表示され、以下の操作が可能です。</p><ul><li><p><strong>状態の切り替え</strong> カード上のスイッチでモジュールの有効化または無効化を制御します。無効化すると、モジュールカードの背景が灰色になります。</p></li><li><p><strong>モジュールのアンインストール</strong> モジュールリストから指定したモジュールを削除します。操作が完了すると、モジュールカードに削除線が付けられます。</p></li><li><p><strong>お気に入り登録とトップへの固定</strong> モジュールカードを<strong>長押し</strong>することで、お気に入り登録してリストの一番上に固定し、簡単にアクセスできるようにできます。</p></li><li><p><strong>専用機能へのアクセス</strong></p><ul><li><strong>「インターフェース」ボタン</strong>：モジュールに組み込まれたWebUIを起動します。</li><li><strong>「機能」ボタン</strong>：モジュールの<code>action.sh</code>スクリプトを実行します。</li></ul></li></ul><h3 id="_3-コマンドセット拡張モジュール" tabindex="-1">3. コマンドセット拡張モジュール <a class="header-anchor" href="#_3-コマンドセット拡張モジュール" aria-label="Permalink to “3. コマンドセット拡張モジュール”">​</a></h3><p>システムは、独立したモジュールをインストールすることで追加のコマンドラインツールセットをロードし、ターミナル機能を強化できます。</p><ul><li><strong>利用可能な拡張モジュール</strong>：<code>coreutils</code>、<code>busybox</code>、<code>sush</code></li></ul><div class="warning custom-block github-alert"><p class="custom-block-title">WARNING</p><p>上記の拡張モジュールは、今後<code>ShiroSU</code>メインプログラムに直接統合される予定です。</p></div><hr>',20)),o(s),o(n)])}const N=c(_,[["render",g]]);export{U as __pageData,N as default};
