import{_ as c,a6 as t,L as h,M as m,W as s,a7 as i,aa as d,h as o,P as r,b7 as S}from"./chunks/framework.DSr6HixA.js";const C=JSON.parse('{"title":"モジュール開発","description":"ShiroSU のカスタムモジュールを開発および構築する方法を学びます","frontmatter":{"layout":"doc","title":"モジュール開発","description":"ShiroSU のカスタムモジュールを開発および構築する方法を学びます","outline":"deep","footer":false,"breadcrumbs":[{"title":"ShiroSU","link":"/ja"},{"title":"dev","link":""},{"title":"モジュール開発","link":"/ja/dev/module"}]},"headers":[],"relativePath":"ja/dev/module.md","filePath":"ja/dev/module.md","lastUpdated":1755655878000}'),b={name:"ja/dev/module.md"},k={class:"tip custom-block"},g={class:"footnotes"},f={class:"footnotes-list"},A={id:"fn2",class:"footnote-item"};function y(U,e,v,P,x,T){const n=t("ArticleMetadata"),a=t("NolebasePageProperties"),l=t("VPNolebaseInlineLinkPreview"),p=t("NolebaseGitContributors"),u=t("NolebaseGitChangelog");return m(),h("div",null,[e[30]||(e[30]=s("h1",{id:"モジュール開発ガイド",tabindex:"-1"},[o("モジュール開発ガイド "),s("a",{class:"header-anchor",href:"#モジュール開発ガイド","aria-label":"Permalink to “モジュール開発ガイド”"},"​")],-1)),i(n),i(a),e[31]||(e[31]=s("p",null,[o("大部分の内容において、ShiroSU は "),s("strong",null,[s("code",null,"Magisk"),o(" と "),s("code",null,"KernelSU")]),o(" とほぼ同じです。ここでは異なる点のみを紹介します。")],-1)),s("div",k,[e[7]||(e[7]=s("p",{class:"custom-block-title custom-block-title-default"},"TIP",-1)),e[8]||(e[8]=s("p",null,[o("ShiroSU を他の root 実装のモジュールマネージャーとしてのみ使用する場合、モジュールの標準は現在の root 実装に準拠する必要があります。ShiroSU は他の root 実装のいかなる動作にも"),s("strong",null,"干渉しません"),o("。")],-1)),s("p",null,[e[1]||(e[1]=o("ただし、モジュールの ",-1)),e[2]||(e[2]=s("strong",null,"WebUI は ShiroSU の",-1)),e[3]||(e[3]=o()),i(l,{href:"./webui"},{default:r(()=>e[0]||(e[0]=[o("モジュール WebUI",-1)])),_:1,__:[0]}),e[4]||(e[4]=o(" を",-1)),e[5]||(e[5]=s("strong",null,"考慮する必要があります",-1)),e[6]||(e[6]=o("。",-1))])]),e[32]||(e[32]=d('<div class="important custom-block github-alert"><p class="custom-block-title">IMPORTANT</p><p>モジュール内のすべてのテキストファイルが <code>UNIX (LF)</code> 改行タイプを使用していることを確認してください。<code>Windows (CR + LF)</code> や <code>Macintosh (CR)</code> ではありません！</p></div><h2 id="systemless" tabindex="-1">Systemless <sup class="footnote-ref"><a href="#fn1" id="fnref1">[1]</a></sup> <a class="header-anchor" href="#systemless" aria-label="Permalink to “Systemless”">​</a></h2><p>ShiroSU の Systemless は、Magisk に類似したマウントメカニズムであり、そのインターフェースは <code>.replace</code> の用法など、Magisk と完全に互換性があります。ただし、ShiroSU のマウントメカニズムは互換性が高く、動的なパーティション認識に基づいています。つまり、モジュールは <code>odm</code> など、他の root 実装ではマウントできないパーティションを直接 Systemless でマウントでき、そのために余分な労力を費やす必要はありません。</p><p>さらに、より高い安全性を確保するために、ShiroSU の Systemless は、モジュールがマウントする <strong>ファイル/ディレクトリの SELinux コンテキスト</strong>、<strong>ディレクトリの権限</strong>、および <strong>ファイル/ディレクトリのユーザー/グループ</strong> を無視します。ファイルが存在しないディレクトリにマウントされた場合、その <strong>SELinux コンテキスト</strong>、<strong>権限</strong>、<strong>ユーザー/グループ</strong> は親ディレクトリから継承されます。通常、これらの動作はモジュールの実行に影響を与えず、むしろ安定性の向上に役立ちます。</p><div class="tip custom-block"><p class="custom-block-title custom-block-title-default">TIP</p><p>ShiroSU の Systemless は、モジュールディレクトリ内の <code>systemless</code> フォルダを使用してマウントを実行します。モジュールが <code>system</code> フォルダを使用して Systemless を使用する場合、<code>systemless</code> フォルダは<strong>自動的に作成されます</strong>。</p><p>モジュールが ShiroSU のみに対応している場合、<code>systemless</code> フォルダを直接使用して Systemless を使用できます。</p></div><h2 id="shell" tabindex="-1">Shell <a class="header-anchor" href="#shell" aria-label="Permalink to “Shell”">​</a></h2><p>ShiroSU は、この点で他の root 実装とは大きく異なります。ShiroSU で実行される Shell スクリプトは、デフォルトでは <code>BusyBox</code> で &quot;独立モード&quot; で<strong>実行されません</strong>。</p>',7)),s("p",null,[e[11]||(e[11]=o("Shell スクリプトの開発を容易にするために、ShiroSU は ",-1)),i(l,{href:"https://github.com/shellgei/rusty_bash",target:"_blank",rel:"noreferrer"},{default:r(()=>e[9]||(e[9]=[o("sush",-1)])),_:1,__:[9]}),e[12]||(e[12]=o(" (Rust で記述された ",-1)),e[13]||(e[13]=s("code",null,"Bash",-1)),e[14]||(e[14]=o(") を使用して Shell スクリプトを実行し、",-1)),i(l,{href:"https://github.com/uutils/coreutils",target:"_blank",rel:"noreferrer"},{default:r(()=>e[10]||(e[10]=[o("uutils",-1)])),_:1,__:[10]}),e[15]||(e[15]=o(" (Rust で記述された ",-1)),e[16]||(e[16]=s("code",null,"coreutils",-1)),e[17]||(e[17]=o(") のコマンドセットを優先的に使用し、Magisk の BusyBox を代替として使用します。つまり、コマンドは",-1)),e[18]||(e[18]=s("strong",null,"最初に uutils から取得され",-1)),e[19]||(e[19]=o("、存在しないコマンドのみが BusyBox から取得されます。",-1))]),e[33]||(e[33]=d(`<p>BusyBox で &quot;独立モード&quot; で実行されないため、コマンドは <code>PATH</code> 環境変数を介して注入されます。モジュールの Shell スクリプト内で <code>PATH</code> をハードコーディングして変更しないでください！</p><h3 id="環境変数" tabindex="-1">環境変数 <a class="header-anchor" href="#環境変数" aria-label="Permalink to “環境変数”">​</a></h3><p>区別を容易にするために、ShiroSU はモジュールの実行時に以下の変数を注入します。</p><ul><li><code>SSU</code> (ブール値): ShiroSU 環境で実行されている場合、この値は <code>true</code> になります。ただし、<code>$SSU &amp;&amp; # code ...</code> を使用してコードを実行できるわけではありません。常に <code>[ &quot;$SSU&quot; = true ]</code> または同様の方法を使用して ShiroSU を検出する必要があります。</li><li><code>SSU_VER</code> (文字列): ShiroSU のバージョン番号 (パッチ番号は含まれません)</li><li><code>SSU_VER_CODE</code> (整数値): ShiroSU の純粋な数値バージョン番号 (パッチ番号を含む)</li></ul><h3 id="recovery" tabindex="-1">Recovery <a class="header-anchor" href="#recovery" aria-label="Permalink to “Recovery”">​</a></h3><p>ShiroSU は Recovery を介したモジュールのインストールをサポートしていません。モジュールのインストール時に <code>META-INF/com/google/android/update-binary</code> 内のコードは実行されません。</p><h3 id="su-呼び出し" tabindex="-1">SU 呼び出し <a class="header-anchor" href="#su-呼び出し" aria-label="Permalink to “SU 呼び出し”">​</a></h3><p>ShiroSU の SU 実装には、デフォルトで Shell コマンドを直接実行するためだけに使用できる <code>sudo</code> が付属しています。たとえば、<code>sudo ls /</code> を実行できます。</p><p><code>sudo</code> は、簡素化された <code>su -c</code> の代替としてのみ存在しますが、モジュール内で <code>sudo</code> または <code>su -c</code> を使用して Shell コマンドを実行するべき<strong>ではありません</strong>！</p><p><mark>同様に、モジュールは<strong>ハードコーディング</strong>によってコマンドを取得するべき<strong>ではありません</strong>。たとえば、<code>/data/adb/ssu/bin/busybox crond</code> などです。BusyBox の &quot;独立モード&quot; であっても、<code>PATH</code> を介してコマンドが直接注入されていても、コマンドはすでに直接呼び出すことができ、ハードコーディングされた手動取得は不要です。</mark></p><h2 id="ansi-エスケープコード" tabindex="-1">ANSI エスケープコード <sup class="footnote-ref"><a href="#fn2" id="fnref2">[2]</a></sup> <a class="header-anchor" href="#ansi-エスケープコード" aria-label="Permalink to “ANSI エスケープコード”">​</a></h2><p>ShiroSU では、<code>module.prop</code> または Shell スクリプトで <code>ANSI エスケープコード</code> を使用してテキストの表示を豊かにすることができます。たとえば、<code>module.prop</code> で次のコードを使用できます。</p><div class="language-properties line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">properties</span><pre class="shiki shiki-themes github-light github-dark-dimmed" style="--shiki-light:#24292e;--shiki-dark:#adbac7;--shiki-light-bg:#fff;--shiki-dark-bg:#22272e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">id</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">=ssu_cmd_ext</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">name</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">=Command Set Extension</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">version</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">=Auto-generated by SSU</span></span>
<span class="line highlighted"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">versionAnsi</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">=\\e[1mAuto-generated\\e[0m by SSU</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">versionCode</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">=1</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">author</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">=SSU Developers (OOM. WG.)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">description</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">=Add coreutils, busybox, and bash to /system/bin.</span></span>
<span class="line highlighted"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">descriptionAnsi</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">=Add \\e[1mcoreutils, busybox, and bash\\e[0m to \\e[1m/system/bin\\e[0m.</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p>上記の <code>module.prop</code> を使用すると、モジュールが ShiroSU マネージャーに表示されるときに、<code>Auto-generated</code>、<code>coreutils, busybox, and bash</code>、および <code>/system/bin</code> が太字で表示されます。</p><p><code>module.prop</code> では、<code>nameAnsi</code>、<code>versionAnsi</code>、<code>authorAnsi</code>、および <code>descriptionAnsi</code> を使用して、ANSI エスケープコードを含むテキストを表示できます。</p><p><code>Ansi</code> サフィックスが含まれていなくても使用できますが、互換性を確保するために、そうしてください。</p><p><mark>ShiroSU は <code>module.prop</code> の内容を順番に解析して読み取るため、<code>Ansi</code> サフィックスを含む値が後にあることを確認してください。</mark></p><details class="details custom-block"><summary>展開してレンダリング効果を表示</summary><p><img src="`+S+'" alt="module.prop 渲染效果"></p></details><h2 id="モジュール-webui" tabindex="-1">モジュール WebUI <a class="header-anchor" href="#モジュール-webui" aria-label="Permalink to “モジュール WebUI”">​</a></h2>',19)),s("p",null,[e[21]||(e[21]=o("ShiroSU と ",-1)),e[22]||(e[22]=s("code",null,"KernelSU",-1)),e[23]||(e[23]=o(" も同様に、モジュールが WebUI を使用して機能を提供することを許可しています。詳細については、",-1)),i(l,{href:"./webui"},{default:r(()=>e[20]||(e[20]=[o("モジュール WebUI",-1)])),_:1,__:[20]}),e[24]||(e[24]=o(" を参照してください。",-1))]),e[34]||(e[34]=d('<h2 id="module-prop" tabindex="-1">module.prop <a class="header-anchor" href="#module-prop" aria-label="Permalink to “module.prop”">​</a></h2><p>ShiroSU マネージャーには、<code>module.prop</code> が破損しているか、仕様に準拠しているかを検出するメカニズムがあります。破損しているか、仕様に準拠していない場合、ShiroSU マネージャーはそのモジュールの上部にラベルを表示します。</p><div class="warning custom-block"><p class="custom-block-title custom-block-title-default">WARNING</p><p>一部のモジュールでは、<code>sed</code> コマンドを使用して <code>module.prop</code> を変更し、コンテンツをリアルタイムで更新していますが、この方法では <code>module.prop</code> ファイルが破損する可能性がいくらかあります。<code>sed</code> を使用した変更を避けたり、他の方法でリアルタイムコンテンツを表示したり、<code>module.prop</code> の破損検出メカニズムを実装して、破損時にデフォルトコンテンツに復元したりすることもできます。</p></div><p>ShiroSU マネージャーは、具体的に次の内容を検出します。</p><ul><li><code>module.prop</code> 内に構文に準拠しないコンテンツが含まれているかどうか</li><li><code>id</code>、<code>name</code>、<code>version</code>、<code>author</code>、<code>description</code> が空かどうか ( <code>Ansi</code> サフィックスが付いている場合も同様に検出)</li><li><code>id</code> が次の正規表現に準拠しているかどうか: <code>^[a-zA-Z][a-zA-Z0-9._-]+$</code></li><li><code>versionCode</code> が <strong>0</strong> より大きいかどうか</li><li><code>module.prop</code> 内に大文字と小文字の区別が正しくない箇所があるかどうか (ShiroSU マネージャーは正常に解析しますが、ラベルは表示されます)</li></ul><p><mark><code>module.prop</code> が破損しているだけの場合は、モジュールを再インストールすることで通常この問題を解決できます。仕様に準拠していない場合は、開発者が自分で修正してこの問題を解決する必要があります。</mark></p><h2 id="カーネルインターフェース" tabindex="-1">カーネルインターフェース <a class="header-anchor" href="#カーネルインターフェース" aria-label="Permalink to “カーネルインターフェース”">​</a></h2><p>ShiroSU は <code>/data/adb/ssu/._settings</code> をカーネル設定ディレクトリとして使用します。通常、次のファイルが含まれます。</p><ul><li><code>._su_list</code>: スーパーユーザー権限の使用を許可されたリスト</li><li><code>._bypass_list</code>: SELinux 制限をバイパスするリスト</li><li><code>._hide_list</code>: root 使用の痕跡を隠す必要があるリスト</li></ul><p><mark>上記のファイルはすべて、<code>バイナリ UID</code>(32 ビット整数) + <code>\\0</code> + <code>パッケージ名</code> 形式で保存され、複数の値は <code>\\n</code> で区切られます</mark></p><div class="important custom-block github-alert"><p class="custom-block-title">IMPORTANT</p><p>上記のファイルはすべて読み取り専用です。モジュール/ソフトウェアは ShiroSU のカーネル構成ファイルを変更するべきではありません。<strong>ShiroSU マネージャーのみ</strong>が変更権限を持っています！</p><p>他のモジュール/ソフトウェアによる変更は無効になるはずです。ShiroSU は今後のアップデートで、カーネル構成ファイルへの書き込み制限を段階的に追加します。</p></div><h2 id="その他の違い" tabindex="-1">その他の違い <a class="header-anchor" href="#その他の違い" aria-label="Permalink to “その他の違い”">​</a></h2><p>ShiroSU は、今後のアップデートで <strong>モジュールバックアップインターフェース</strong>、<strong>モジュール更新インターフェース (更新時に元のモジュールのコードを実行)</strong>、<strong>モジュールストレージインターフェース</strong> などの機能を提供する予定です。これらの内容はまだ計画段階であり、今後のアップデートでリリースされます。</p>',13)),i(p),i(u),e[35]||(e[35]=s("hr",{class:"footnotes-sep"},null,-1)),s("section",g,[s("ol",f,[e[29]||(e[29]=s("li",{id:"fn1",class:"footnote-item"},[s("p",null,[o("Systemless メカニズムは、システムパーティションを直接変更せずにシステムファイルを変更できる方法であり、モジュールに利便性を提供します。 "),s("a",{href:"#fnref1",class:"footnote-backref"},"↩︎")])],-1)),s("li",A,[s("p",null,[e[26]||(e[26]=o("ANSI エスケープコードは、テキストの表示スタイルを制御するために使用される文字エンコード方式であり、ターミナルおよびコンソールアプリケーションでよく使用されます。詳細については、",-1)),i(l,{href:"https://en.wikipedia.org/wiki/ANSI_escape_code",target:"_blank",rel:"noreferrer"},{default:r(()=>e[25]||(e[25]=[o("Wikipedia",-1)])),_:1,__:[25]}),e[27]||(e[27]=o(" を参照してください。 ",-1)),e[28]||(e[28]=s("a",{href:"#fnref2",class:"footnote-backref"},"↩︎",-1))])])])])])}const I=c(b,[["render",y]]);export{C as __pageData,I as default};
